/* The following code was generated by JFlex 1.6.1 */

import java.util.LinkedList;
import java.util.List;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.io.FileWriter;
import java.util.Collections; 
import java.util.HashMap; 
import java.util.Map;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/LexicalAnalyser.flex</tt>
 */
class LexicalAnalyser {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\3\1\2\1\11\1\3\1\1\16\10\4\0\1\3\1\4"+
    "\2\0\1\6\3\0\1\34\1\35\1\32\1\40\1\33\1\37\1\42"+
    "\1\41\12\5\3\0\1\36\3\0\1\17\1\6\1\7\1\23\1\21"+
    "\1\25\1\16\1\27\1\24\2\6\1\30\1\20\1\22\1\15\1\13"+
    "\1\43\1\14\1\31\1\26\6\6\4\0\1\6\1\0\1\17\1\6"+
    "\1\7\1\23\1\21\1\25\1\16\1\27\1\24\2\6\1\30\1\20"+
    "\1\22\1\15\1\13\1\43\1\14\1\31\1\26\6\6\4\0\6\10"+
    "\1\12\32\10\2\0\4\6\4\0\1\6\2\0\1\10\7\0\1\6"+
    "\4\0\1\6\5\0\27\6\1\0\37\6\1\0\70\6\2\24\115\6"+
    "\1\31\267\6\31\0\162\6\4\0\14\6\16\0\5\6\11\0\1\6"+
    "\21\0\130\10\5\0\23\10\12\0\1\6\13\0\1\6\1\0\3\6"+
    "\1\0\1\6\1\0\24\6\1\0\54\6\1\0\46\6\1\0\5\6"+
    "\4\0\202\6\1\0\4\10\3\0\105\6\1\0\46\6\2\0\2\6"+
    "\6\0\20\6\41\0\46\6\2\0\1\6\7\0\47\6\11\0\21\10"+
    "\1\0\27\10\1\0\3\10\1\0\1\10\1\0\2\10\1\0\1\10"+
    "\13\0\33\6\5\0\3\6\15\0\4\10\14\0\6\10\13\0\32\6"+
    "\5\0\13\6\16\10\7\0\12\10\4\0\2\6\1\10\143\6\1\0"+
    "\1\6\10\10\1\0\6\10\2\6\2\10\1\0\4\10\2\6\12\10"+
    "\3\6\2\0\1\6\17\0\1\10\1\6\1\10\36\6\33\10\2\0"+
    "\3\6\60\0\46\6\13\10\1\6\u014f\0\3\10\66\6\2\0\1\10"+
    "\1\6\20\10\2\0\1\6\4\10\3\0\12\6\2\10\2\0\12\10"+
    "\21\0\3\10\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\1\6\3\0\4\6\2\0\1\10\1\6\7\10\2\0\2\10"+
    "\2\0\3\10\11\0\1\10\4\0\2\6\1\0\3\6\2\10\2\0"+
    "\12\10\4\6\15\0\3\10\1\0\6\6\4\0\2\6\2\0\26\6"+
    "\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\10"+
    "\1\0\5\10\4\0\2\10\2\0\3\10\13\0\4\6\1\0\1\6"+
    "\7\0\14\10\3\6\14\0\3\10\1\0\11\6\1\0\3\6\1\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\10\1\6"+
    "\10\10\1\0\3\10\1\0\3\10\2\0\1\6\17\0\2\6\2\10"+
    "\2\0\12\10\1\0\1\6\17\0\3\10\1\0\10\6\2\0\2\6"+
    "\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\10"+
    "\1\6\6\10\3\0\2\10\2\0\3\10\10\0\2\10\4\0\2\6"+
    "\1\0\3\6\4\0\12\10\1\0\1\6\20\0\1\10\1\6\1\0"+
    "\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0"+
    "\2\6\3\0\2\6\3\0\3\6\3\0\10\6\1\0\3\6\4\0"+
    "\5\10\3\0\3\10\1\0\4\10\11\0\1\10\17\0\11\10\11\0"+
    "\1\6\7\0\3\10\1\0\10\6\1\0\3\6\1\0\27\6\1\0"+
    "\12\6\1\0\5\6\4\0\7\10\1\0\3\10\1\0\4\10\7\0"+
    "\2\10\11\0\2\6\4\0\12\10\22\0\2\10\1\0\10\6\1\0"+
    "\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\10\1\6"+
    "\7\10\1\0\3\10\1\0\4\10\7\0\2\10\7\0\1\6\1\0"+
    "\2\6\4\0\12\10\22\0\2\10\1\0\10\6\1\0\3\6\1\0"+
    "\27\6\1\0\20\6\4\0\6\10\2\0\3\10\1\0\4\10\11\0"+
    "\1\10\10\0\2\6\4\0\12\10\22\0\2\10\1\0\22\6\3\0"+
    "\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0\1\10\4\0"+
    "\6\10\1\0\1\10\1\0\10\10\22\0\2\10\15\0\60\6\1\10"+
    "\2\6\7\10\4\0\10\6\10\10\1\0\12\10\47\0\2\6\1\0"+
    "\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0"+
    "\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0"+
    "\4\6\1\10\2\6\6\10\1\0\2\10\1\6\2\0\5\6\1\0"+
    "\1\6\1\0\6\10\2\0\12\10\2\0\2\6\42\0\1\6\27\0"+
    "\2\10\6\0\12\10\13\0\1\10\1\0\1\10\1\0\1\10\4\0"+
    "\2\10\10\6\1\0\42\6\6\0\24\10\1\0\2\10\4\6\4\0"+
    "\10\10\1\0\44\10\11\0\1\10\71\0\42\6\1\0\5\6\1\0"+
    "\2\6\1\0\7\10\3\0\4\10\6\0\12\10\6\0\6\6\4\10"+
    "\106\0\46\6\12\0\51\6\7\0\132\6\5\0\104\6\5\0\122\6"+
    "\6\0\7\6\1\0\77\6\1\0\1\6\1\0\4\6\2\0\7\6"+
    "\1\0\1\6\1\0\4\6\2\0\47\6\1\0\1\6\1\0\4\6"+
    "\2\0\37\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\1\6"+
    "\1\0\4\6\2\0\7\6\1\0\7\6\1\0\27\6\1\0\37\6"+
    "\1\0\1\6\1\0\4\6\2\0\7\6\1\0\47\6\1\0\23\6"+
    "\16\0\11\10\56\0\125\6\14\0\u026c\6\2\0\10\6\12\0\32\6"+
    "\5\0\113\6\3\0\3\6\17\0\15\6\1\0\4\6\3\10\13\0"+
    "\22\6\3\10\13\0\22\6\2\10\14\0\15\6\1\0\3\6\1\0"+
    "\2\10\14\0\64\6\40\10\3\0\1\6\3\0\2\6\1\10\2\0"+
    "\12\10\41\0\3\10\2\0\12\10\6\0\130\6\10\0\51\6\1\10"+
    "\126\0\35\6\3\0\14\10\4\0\14\10\12\0\12\10\36\6\2\0"+
    "\5\6\u038b\0\154\6\224\0\234\6\4\0\132\6\6\0\26\6\2\0"+
    "\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0"+
    "\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0"+
    "\15\6\5\0\3\6\1\0\7\6\17\0\4\10\30\0\1\11\1\11"+
    "\5\10\20\0\2\6\23\0\1\6\13\0\4\10\6\0\6\10\1\0"+
    "\1\6\15\0\1\6\40\0\22\6\36\0\15\10\4\0\1\10\3\0"+
    "\6\10\27\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0"+
    "\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\3\6\1\0\7\6\3\0\3\6\5\0\5\6\26\0\44\6\u0e81\0"+
    "\3\6\31\0\11\6\6\10\1\0\5\6\2\0\5\6\4\0\126\6"+
    "\2\0\2\10\2\0\3\6\1\0\137\6\5\0\50\6\4\0\136\6"+
    "\21\0\30\6\70\0\20\6\u0200\0\u19b6\6\112\0\u51a6\6\132\0\u048d\6"+
    "\u0773\0\u2ba4\6\u215c\0\u012e\6\2\0\73\6\225\0\7\6\14\0\5\6"+
    "\5\0\1\6\1\10\12\6\1\0\15\6\1\0\5\6\1\0\1\6"+
    "\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6"+
    "\2\0\66\6\50\0\15\6\3\0\20\10\20\0\4\10\17\0\2\6"+
    "\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\10"+
    "\4\0\1\6\13\0\12\10\7\0\32\6\4\0\1\6\1\0\32\6"+
    "\12\0\132\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6"+
    "\3\0\2\6\3\0\2\6\22\0\3\10\4\0\14\6\1\0\32\6"+
    "\1\0\23\6\1\0\2\6\1\0\17\6\2\0\16\6\42\0\173\6"+
    "\u0205\0\37\6\21\0\33\6\65\0\36\6\142\0\236\6\2\0\12\10"+
    "\u0356\0\6\6\2\0\1\6\1\0\54\6\1\0\2\6\3\0\1\6"+
    "\2\0\1\6\uc925\0\5\10\3\0\26\10\2\0\7\10\36\0\4\10"+
    "\u0252\0\125\6\1\0\107\6\1\0\2\6\2\0\1\6\2\0\2\6"+
    "\2\0\4\6\1\0\14\6\1\0\1\6\1\0\7\6\1\0\101\6"+
    "\1\0\4\6\2\0\10\6\1\0\7\6\1\0\34\6\1\0\4\6"+
    "\1\0\5\6\1\0\1\6\3\0\7\6\1\0\u0152\6\4\0\31\6"+
    "\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6"+
    "\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\6\6"+
    "\4\0\62\10\u2800\0\ua6d7\6\u5129\0\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\10\36\0\140\10\200\0\360\10\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\7\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\2\1\1\3"+
    "\1\1\2\5\1\6\4\5\1\16\1\5\1\17\1\5"+
    "\10\0\1\3\1\16\3\5\1\20\3\5\11\0\5\5"+
    "\1\21\1\5\1\22\1\23\1\24\1\25\1\0\1\26"+
    "\1\0\1\27\1\30\1\31\2\5\1\32\1\33\1\34"+
    "\1\5\1\35\1\36\1\5\1\37\1\5\1\40\1\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[93];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\110\0\110\0\220\0\264"+
    "\0\330\0\374\0\u0120\0\u0144\0\u0168\0\u018c\0\110\0\110"+
    "\0\110\0\110\0\110\0\110\0\110\0\110\0\u01b0\0\u01d4"+
    "\0\u01d4\0\u01f8\0\u021c\0\u0240\0\u01f8\0\u0264\0\u0288\0\u02ac"+
    "\0\u02d0\0\264\0\u02f4\0\264\0\u0318\0\u033c\0\u0360\0\u0384"+
    "\0\u03a8\0\u03cc\0\u03f0\0\u01d4\0\u01f8\0\u0414\0\u021c\0\u0438"+
    "\0\u045c\0\u0480\0\u04a4\0\u04c8\0\u04ec\0\u0510\0\u0534\0\u0558"+
    "\0\u057c\0\u05a0\0\u05c4\0\u05e8\0\u060c\0\u0630\0\u0654\0\u0678"+
    "\0\u069c\0\u06c0\0\u06e4\0\u0708\0\264\0\u072c\0\264\0\110"+
    "\0\110\0\110\0\u0750\0\110\0\u0774\0\110\0\110\0\110"+
    "\0\u0798\0\u07bc\0\110\0\264\0\264\0\u07e0\0\110\0\110"+
    "\0\u0804\0\110\0\u0828\0\264\0\264";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[93];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\3\1\7\2\10\1\3"+
    "\2\0\1\11\1\12\4\10\1\13\1\10\1\14\1\15"+
    "\1\10\1\16\3\10\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\10\1\3\2\30\1\31"+
    "\1\32\1\7\1\10\1\33\1\3\2\0\1\11\1\12"+
    "\4\10\1\13\1\10\1\34\1\15\1\10\1\16\3\10"+
    "\1\35\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\10\46\0\1\5\46\0\1\7\43\0\4\10"+
    "\1\0\20\10\11\0\1\10\5\0\4\10\1\0\2\10"+
    "\1\36\15\10\11\0\1\10\5\0\4\10\1\0\7\10"+
    "\1\37\10\10\11\0\1\10\5\0\4\10\1\0\10\10"+
    "\1\40\5\10\1\41\1\10\11\0\1\10\5\0\4\10"+
    "\1\0\3\10\1\42\14\10\11\0\1\10\5\0\4\10"+
    "\1\0\10\10\1\43\2\10\1\44\4\10\11\0\1\10"+
    "\5\0\4\10\1\0\15\10\1\45\2\10\11\0\1\10"+
    "\15\0\1\46\1\47\1\50\1\0\1\51\1\52\5\0"+
    "\1\53\14\0\2\30\1\54\40\0\1\55\1\56\1\6"+
    "\42\55\1\56\1\6\2\55\4\33\1\55\20\33\11\55"+
    "\1\33\1\55\1\56\1\6\2\55\4\33\1\55\3\33"+
    "\1\57\14\33\11\55\1\33\5\0\4\10\1\0\3\10"+
    "\1\60\6\10\1\61\5\10\11\0\1\10\5\0\4\10"+
    "\1\0\5\10\1\62\12\10\11\0\1\10\5\0\4\10"+
    "\1\0\11\10\1\63\6\10\11\0\1\10\5\0\4\10"+
    "\1\0\17\10\1\64\11\0\1\10\5\0\4\10\1\0"+
    "\14\10\1\65\3\10\11\0\1\10\5\0\4\10\1\0"+
    "\7\10\1\66\10\10\11\0\1\10\14\0\1\67\50\0"+
    "\1\70\4\0\1\71\37\0\1\72\64\0\1\73\15\0"+
    "\1\74\3\0\1\75\43\0\1\76\4\0\1\77\17\0"+
    "\1\6\46\0\4\10\1\0\4\10\1\100\13\10\11\0"+
    "\1\10\5\0\4\10\1\0\10\10\1\101\7\10\11\0"+
    "\1\10\5\0\4\10\1\0\11\10\1\102\6\10\11\0"+
    "\1\10\5\0\4\10\1\0\11\10\1\103\1\104\5\10"+
    "\11\0\1\10\5\0\4\10\1\0\7\10\1\105\10\10"+
    "\11\0\1\10\5\0\4\10\1\0\7\10\1\106\10\10"+
    "\11\0\1\10\5\0\4\10\1\0\10\10\1\107\7\10"+
    "\11\0\1\10\42\0\1\110\43\0\1\111\43\0\1\112"+
    "\24\0\1\113\62\0\1\114\27\0\1\115\57\0\1\116"+
    "\43\0\1\117\43\0\1\120\6\0\4\10\1\0\2\10"+
    "\1\121\15\10\11\0\1\10\5\0\4\10\1\0\14\10"+
    "\1\122\3\10\11\0\1\10\5\0\4\10\1\0\20\10"+
    "\1\123\10\0\1\10\5\0\4\10\1\0\3\10\1\124"+
    "\14\10\11\0\1\10\5\0\4\10\1\0\13\10\1\125"+
    "\4\10\11\0\1\10\5\0\4\10\1\0\4\10\1\126"+
    "\13\10\11\0\1\10\42\0\1\127\43\0\1\130\6\0"+
    "\4\10\1\0\5\10\1\131\12\10\11\0\1\10\5\0"+
    "\4\10\1\0\20\10\1\132\10\0\1\10\5\0\4\10"+
    "\1\0\7\10\1\133\10\10\11\0\1\10\5\0\4\10"+
    "\1\0\6\10\1\134\11\10\11\0\1\10\5\0\4\10"+
    "\1\0\2\10\1\135\15\10\11\0\1\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2124];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\2\11\10\1\10\11\17\1\10\0"+
    "\11\1\11\0\10\1\3\11\1\0\1\11\1\0\3\11"+
    "\2\1\1\11\3\1\2\11\1\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[93];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

	private String inputFile = null;
  
	// tracking of Identifiers and their first occurence
	Map<String, Integer> symbolTable;
	
	// keeping track of the last token
	LexicalUnit lastToken;

	// List of all tokens
	protected ArrayList<Symbol> tokenList;

	private void symbol(LexicalUnit type){
		symbol(type, yytext());
	}

	private void symbol(LexicalUnit type, Object val){
		tokenList.add(new Symbol(type, yyline+1, yycolumn+1, val));
		lastToken = type;
	}

	private void foundIdentifier(){
		// ignore identifier if last token was 'PROGRAM'
		if (lastToken == LexicalUnit.PROGRAM){
			lastToken = LexicalUnit.VARNAME;
			return;
		}

		Integer whatLine = symbolTable.get(yytext());
  		if ( whatLine == null ) {
      			symbolTable.put(yytext(), yyline+1);
  		}
	}

	private void removeLastEndlineToken(){
		// special case if list is empty
		if (tokenList.size() == 0){
			return;
		}
		Symbol s = tokenList.get(tokenList.size()-1);
		if (s.getType() == LexicalUnit.ENDLINE){
			tokenList.remove(s);
		}
	}

	private void printTokens(){
		for (Symbol s : tokenList){
			System.out.println(s.toString());
		}
	}
  
	/**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */ 
 	public ArrayList<Symbol>  RunScanner(String argv[]) {
	   	if (argv.length == 0) {
			System.out.println("Usage : java LexicalAnalyser [ --encoding <name> ] <inputfile(s)>");
		}
		else {
			int firstFilePos = 0;
			String encodingName = "UTF-8";
		  	if (argv[0].equals("--encoding")) {
		    	firstFilePos = 2;
		    	encodingName = argv[1];
		    	try {
		      		java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
		    	} catch (Exception e) {
		      		System.out.println("Invalid encoding '" + encodingName + "'");
		      		return null;
		    	}
		  	}
		  	for (int i = firstFilePos; i < argv.length; i++) {
		    	LexicalAnalyser scanner = null;
		
		    	try {
			  
		      		java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
		      		java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
		      		scanner = new LexicalAnalyser(reader);
			  		//scanner.inputFile = argv[i];
		      		while ( !scanner.zzAtEOF ) scanner.yylex();
		      		this.tokenList=scanner.tokenList;
		    	}
		    	catch (java.io.FileNotFoundException e) {
		      		System.out.println("File not found : \""+argv[i]+"\"");
		    	}
		    	catch (java.io.IOException e) {
		      		System.out.println("IO error scanning file \""+argv[i]+"\"");
		      		System.out.println(e);
		    	}
		    	catch (Exception e) {
		      		System.out.println("Unexpected exception:");
		      		e.printStackTrace();
		    	}
		  	}
		}
	   	return (ArrayList<Symbol>) this.tokenList.clone();
	}
	
	private void printIdentifiers(){
		ArrayList<String> id = new ArrayList<String>(symbolTable.keySet());
		Collections.sort(id, String.CASE_INSENSITIVE_ORDER);

		System.out.println("Identifiers");
		for ( String identifier : id ) {
			System.out.println(identifier + " " + symbolTable.get(identifier));
		}
	}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexicalAnalyser(java.io.Reader in) {
  	symbolTable = new HashMap<String, Integer>();
	lastToken = null;
	tokenList = new ArrayList<Symbol>();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2032) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    	removeLastEndlineToken();
	//printTokens();
	//printIdentifiers();

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 34: break;
          case 2: 
            { symbol(LexicalUnit.ENDLINE, " ");
            }
          case 35: break;
          case 3: 
            { /* Ignore */
            }
          case 36: break;
          case 4: 
            { symbol(LexicalUnit.NUMBER);
            }
          case 37: break;
          case 5: 
            { foundIdentifier();
			symbol(LexicalUnit.VARNAME);
            }
          case 38: break;
          case 6: 
            { symbol(LexicalUnit.TIMES);
            }
          case 39: break;
          case 7: 
            { symbol(LexicalUnit.COMMA);
            }
          case 40: break;
          case 8: 
            { symbol(LexicalUnit.LEFT_PARENTHESIS);
            }
          case 41: break;
          case 9: 
            { symbol(LexicalUnit.RIGHT_PARENTHESIS);
            }
          case 42: break;
          case 10: 
            { symbol(LexicalUnit.EQUAL);
            }
          case 43: break;
          case 11: 
            { symbol(LexicalUnit.MINUS);
            }
          case 44: break;
          case 12: 
            { symbol(LexicalUnit.PLUS);
            }
          case 45: break;
          case 13: 
            { symbol(LexicalUnit.DIVIDE);
            }
          case 46: break;
          case 14: 
            { symbol(LexicalUnit.DO);
            }
          case 47: break;
          case 15: 
            { symbol(LexicalUnit.IF);
            }
          case 48: break;
          case 16: 
            { symbol(LexicalUnit.END);
            }
          case 49: break;
          case 17: 
            { symbol(LexicalUnit.ELSE);
            }
          case 50: break;
          case 18: 
            { symbol(LexicalUnit.THEN);
            }
          case 51: break;
          case 19: 
            { symbol(LexicalUnit.OR);
            }
          case 52: break;
          case 20: 
            { symbol(LexicalUnit.GREATER_EQUAL);
            }
          case 53: break;
          case 21: 
            { symbol(LexicalUnit.GREATER);
            }
          case 54: break;
          case 22: 
            { symbol(LexicalUnit.EQUAL_COMPARE);
            }
          case 55: break;
          case 23: 
            { symbol(LexicalUnit.DIFFERENT);
            }
          case 56: break;
          case 24: 
            { symbol(LexicalUnit.SMALLER_EQUAL);
            }
          case 57: break;
          case 25: 
            { symbol(LexicalUnit.SMALLER);
            }
          case 58: break;
          case 26: 
            { symbol(LexicalUnit.READ);
            }
          case 59: break;
          case 27: 
            { symbol(LexicalUnit.ENDDO);
            }
          case 60: break;
          case 28: 
            { symbol(LexicalUnit.ENDIF);
            }
          case 61: break;
          case 29: 
            { symbol(LexicalUnit.AND);
            }
          case 62: break;
          case 30: 
            { symbol(LexicalUnit.NOT);
            }
          case 63: break;
          case 31: 
            { symbol(LexicalUnit.PRINT);
            }
          case 64: break;
          case 32: 
            { symbol(LexicalUnit.PROGRAM);
            }
          case 65: break;
          case 33: 
            { symbol(LexicalUnit.INTEGER);
            }
          case 66: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
